import serial
import paho.mqtt.client as mqtt
import json
import time
from datetime import datetime
import cv2
import threading
import base64

MQTT_BROKER = "broker.hivemq.com"
MQTT_PORT = 1883
MQTT_TOPIC_SENSOR = "robot/sensor_data"
MQTT_TOPIC_COMMAND = "robot/commands"
MQTT_TOPIC_VIDEO = "robot/video"

SERIAL_PORT = "/dev/ttyUSB0"  # Changed from video0 to ttyUSB0
SERIAL_BAUD = 115200

class RobotBridge:
    def __init__(self):
        self.serial = serial.Serial(SERIAL_PORT, SERIAL_BAUD, timeout=1)
        time.sleep(2)

        self.client = mqtt.Client(protocol=mqtt.MQTTv5)  # Updated to use MQTT v5
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        
        try:
            self.client.connect(MQTT_BROKER, MQTT_PORT, 60)
            self.client.loop_start()
        except Exception as e:
            print(f"MQTT Connection error: {e}")
            raise

        self.setup_camera()
        
        if self.cap is not None and self.cap.isOpened():
            self.video_thread = threading.Thread(target=self.stream_video)
            self.video_thread.daemon = True
            self.video_thread.start()

    def setup_camera(self):
        self.cap = None
        camera_ports = [0, 2, -1]  # Try different camera ports
        
        for port in camera_ports:
            try:
                print(f"Trying camera port {port}")
                cap = cv2.VideoCapture(port)
                if cap.isOpened():
                    self.cap = cap
                    self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)  # Reduced resolution
                    self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
                    self.cap.set(cv2.CAP_PROP_FPS, 15)  # Reduced FPS
                    print(f"Successfully opened camera on port {port}")
                    break
                else:
                    cap.release()
            except Exception as e:
                print(f"Error trying port {port}: {e}")
                if cap:
                    cap.release()
        
        if self.cap is None:
            print("Warning: No camera found, continuing without video streaming")

    def on_connect(self, client, userdata, flags, rc, properties=None):
        print(f"Connected to MQTT broker with code {rc}")
        client.subscribe(MQTT_TOPIC_COMMAND)

    def on_message(self, client, userdata, msg):
        try:
            command = msg.payload.decode()
            print(f"Received command: {command}")
            self.serial.write(f"{command}\n".encode())
        except Exception as e:
            print(f"Error processing command: {e}")

    def process_sensor_data(self, data):
        try:
            parts = data.split(':')
            if parts[0] == "SENSOR_DATA":
                return json.dumps({
                    "timestamp": datetime.now().isoformat(),
                    "ultrasonic_distance": min(float(parts[1]), 200.0),
                    "ir_left": bool(int(parts[2])),
                    "ir_right": bool(int(parts[3])),
                    "speed_left": float(parts[4]),
                    "speed_right": float(parts[5]),
                    "scenario": int(parts[6]),
                    "servo_position": int(parts[7])
                })
        except Exception as e:
            print(f"Error processing sensor data: {e}")
        return None

    def stream_video(self):
        while True:
            try:
                if self.cap and self.cap.isOpened():
                    ret, frame = self.cap.read()
                    if ret:
                        # Compress image more aggressively
                        _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 40])
                        jpg_as_text = base64.b64encode(buffer).decode()
                        self.client.publish(MQTT_TOPIC_VIDEO, jpg_as_text, qos=0)
                time.sleep(0.067)  # ~15 FPS
            except Exception as e:
                print(f"Error in video streaming: {e}")
                time.sleep(1)

    def run(self):
        print("Starting Robot Bridge...")
        while True:
            try:
                if self.serial.in_waiting:
                    line = self.serial.readline().decode().strip()
                    if line.startswith("SENSOR_DATA"):
                        sensor_json = self.process_sensor_data(line)
                        if sensor_json:
                            self.client.publish(MQTT_TOPIC_SENSOR, sensor_json)
                time.sleep(0.01)
            except serial.SerialException as e:
                print(f"Serial error: {e}")
                time.sleep(1)
            except Exception as e:
                print(f"Error in main loop: {e}")
                time.sleep(1)

    def cleanup(self):
        print("Cleaning up resources...")
        try:
            if hasattr(self, 'client'):
                self.client.loop_stop()
                self.client.disconnect()
            if hasattr(self, 'serial'):
                self.serial.close()
            if self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception as e:
            print(f"Error during cleanup: {e}")

if __name__ == "__main__":
    bridge = None
    try:
        bridge = RobotBridge()
        bridge.run()
    except KeyboardInterrupt:
        print("\nShutting down gracefully...")
    except Exception as e:
        print(f"Fatal error: {e}")
    finally:
        if bridge:
            bridge.cleanup()
