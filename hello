import serial
import time
from datetime import datetime
import requests
import json

# ThingSpeak configuration
WRITE_API_KEY = 'OEH1GUAT6UXH5P6N'
CHANNEL_ID = '2794357'
THINGSPEAK_URL = 'https://api.thingspeak.com/update'

SERIAL_PORT = '/dev/ttyUSB0'
BAUD_RATE = 9600
THINGSPEAK_INTERVAL = 15

class SmartSystem:
    def __init__(self):
        self.arduino = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
        time.sleep(2)
        self.last_thingspeak_update = 0

    def get_sensor_data(self):
        try:
            if self.arduino.in_waiting:
                data = self.arduino.readline().decode().strip().split(',')
                if len(data) == 7:
                    return {
                        'temperature': float(data[0]),
                        'humidity': float(data[1]),
                        'people_count': int(data[2]),
                        'light': bool(int(data[3])),
                        'smoke': bool(int(data[4])),
                        'sound': bool(int(data[5])),
                        'door': bool(int(data[6]))
                    }
        except Exception as e:
            print(f"Error reading Arduino data: {e}")
        return None

    def upload_to_thingspeak(self, sensor_data):
        if not sensor_data:
            return

        payload = {
            'api_key': WRITE_API_KEY,
            'field1': sensor_data['people_count'],
            'field2': sensor_data['temperature'],
            'field3': sensor_data['humidity'],
            'field4': int(sensor_data['light']),
            'field5': int(sensor_data['smoke']),
            'field6': int(sensor_data['sound']),
            'field7': int(sensor_data['door'])
        }

        try:
            response = requests.post(THINGSPEAK_URL, data=payload)
            if response.status_code == 200:
                print(f"Data uploaded at {datetime.now()}")
                print(f"Temp: {sensor_data['temperature']}Â°C, "
                      f"Humidity: {sensor_data['humidity']}%, "
                      f"People: {sensor_data['people_count']}")
        except Exception as e:
            print(f"ThingSpeak upload error: {e}")

    def run(self):
        try:
            print("System started. Press Ctrl+C to exit.")
            while True:
                sensor_data = self.get_sensor_data()
                
                current_time = time.time()
                if sensor_data and current_time - self.last_thingspeak_update >= THINGSPEAK_INTERVAL:
                    self.upload_to_thingspeak(sensor_data)
                    self.last_thingspeak_update = current_time
                
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\nProgram terminated")
            self.arduino.close()
        except Exception as e:
            print(f"Error: {e}")
            self.arduino.close()

if __name__ == "__main__":
    try:
        system = SmartSystem()
        system.run()
    except Exception as e:
        print(f"Failed to start: {e}")
