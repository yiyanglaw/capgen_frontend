import serial
import time
from datetime import datetime
import RPi.GPIO as GPIO
import requests
import json

WRITE_API_KEY = 'OEH1GUAT6UXH5P6N'
CHANNEL_ID = '2794357'
THINGSPEAK_URL = 'https://api.thingspeak.com/update'

SOUND_PIN = 17
IR_SENSOR = 23
ECHO_PIN = 24
TRIG_PIN = 25
LDR_PIN = 27
SMOKE_PIN = 22

SOUND_THRESHOLD = 500
DISTANCE_THRESHOLD = 100
SERIAL_PORT = '/dev/ttyUSB0'
BAUD_RATE = 9600
THINGSPEAK_INTERVAL = 15

class SmartSystem:
    def __init__(self):
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SOUND_PIN, GPIO.IN)
        GPIO.setup(IR_SENSOR, GPIO.IN)
        GPIO.setup(TRIG_PIN, GPIO.OUT)
        GPIO.setup(ECHO_PIN, GPIO.IN)
        GPIO.setup(LDR_PIN, GPIO.IN)
        GPIO.setup(SMOKE_PIN, GPIO.IN)
        
        self.arduino = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
        time.sleep(2)
        
        self.last_thingspeak_update = 0
        self.people_count = 0
        self.door_state = False

    def check_people_counter(self):
        ir_status = GPIO.input(IR_SENSOR)
        
        GPIO.output(TRIG_PIN, True)
        time.sleep(0.00001)
        GPIO.output(TRIG_PIN, False)
        
        while GPIO.input(ECHO_PIN) == 0:
            pulse_start = time.time()
        while GPIO.input(ECHO_PIN) == 1:
            pulse_end = time.time()
        
        distance = (pulse_end - pulse_start) * 17150
        
        if distance < DISTANCE_THRESHOLD:
            if not self.door_state:
                if ir_status == 1:
                    self.people_count += 1
                else:
                    self.people_count = max(0, self.people_count - 1)
                self.door_state = True
        else:
            self.door_state = False

    def get_sensor_data(self):
        sound_level = "High" if GPIO.input(SOUND_PIN) == 1 else "Low"
        light_level = "High" if GPIO.input(LDR_PIN) == 1 else "Low"
        smoke_detected = GPIO.input(SMOKE_PIN) == 1
        
        try:
            if self.arduino.in_waiting:
                data = json.loads(self.arduino.readline().decode().strip())
                return {
                    'temperature': data['temperature'],
                    'humidity': data['humidity'],
                    'sound': sound_level,
                    'light': light_level,
                    'smoke': smoke_detected,
                    'people_count': self.people_count,
                    'door': self.door_state
                }
        except Exception as e:
            print(f"Error reading Arduino data: {e}")
        return None

    def upload_to_thingspeak(self, sensor_data):
        if not sensor_data:
            return

        payload = {
            'api_key': WRITE_API_KEY,
            'field1': sensor_data['people_count'],
            'field2': sensor_data['temperature'],
            'field3': sensor_data['humidity'],
            'field4': sensor_data['light'],
            'field5': sensor_data['smoke'],
            'field6': 1 if sensor_data['sound'] == "High" else 0,
            'field7': sensor_data['door']
        }

        try:
            response = requests.post(THINGSPEAK_URL, data=payload)
            if response.status_code == 200:
                print(f"Data uploaded successfully at {datetime.now()}")
        except Exception as e:
            print(f"Error uploading to ThingSpeak: {e}")

    def run(self):
        try:
            while True:
                self.check_people_counter()
                sensor_data = self.get_sensor_data()
                
                current_time = time.time()
                if sensor_data and current_time - self.last_thingspeak_update >= THINGSPEAK_INTERVAL:
                    self.upload_to_thingspeak(sensor_data)
                    self.last_thingspeak_update = current_time
                
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            self.arduino.close()
            GPIO.cleanup()

if __name__ == "__main__":
    try:
        system = SmartSystem()
        system.run()
    except Exception as e:
        print(f"Error: {e}")
        GPIO.cleanup()
