import serial
import time
from datetime import datetime
import RPi.GPIO as GPIO
import Adafruit_DHT

# Pin definitions
BUZZER_PIN = 18
SOUND_PIN = 17
DHT_PIN = 4
IR_SENSOR = 23
ECHO_PIN = 24
TRIG_PIN = 25
LDR_PIN = 27
SMOKE_PIN = 22

# Constants
SOUND_THRESHOLD = 500
DISTANCE_THRESHOLD = 100
SERIAL_PORT = '/dev/ttyACM0'  # USB connection to Arduino
BAUD_RATE = 9600

class SmartSystem:
    def __init__(self):
        # Setup GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BUZZER_PIN, GPIO.OUT)
        GPIO.setup(SOUND_PIN, GPIO.IN)
        GPIO.setup(IR_SENSOR, GPIO.IN)
        GPIO.setup(TRIG_PIN, GPIO.OUT)
        GPIO.setup(ECHO_PIN, GPIO.IN)
        GPIO.setup(LDR_PIN, GPIO.IN)
        GPIO.setup(SMOKE_PIN, GPIO.IN)
        
        # Initialize serial connection to Arduino
        try:
            self.arduino = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
            time.sleep(2)  # Wait for connection to establish
        except serial.SerialException as e:
            print(f"Error opening serial connection: {e}")
            exit(1)
            
        self.last_buzzer_time = 0
        self.dht_sensor = Adafruit_DHT.DHT11
        self.people_count = 0
        self.door_state = False
        
    def check_sound(self):
        sound_value = GPIO.input(SOUND_PIN)
        if sound_value == GPIO.HIGH:  # High sound detected
            current_time = time.time()
            if current_time - self.last_buzzer_time > 2:  # 2 second cooldown
                GPIO.output(BUZZER_PIN, GPIO.HIGH)
                time.sleep(2)
                GPIO.output(BUZZER_PIN, GPIO.LOW)
                self.last_buzzer_time = current_time
                return "High"
        return "Low"

    def read_temperature_humidity(self):
        humidity, temperature = Adafruit_DHT.read_retry(self.dht_sensor, DHT_PIN)
        return temperature if temperature is not None else 0, humidity if humidity is not None else 0

    def read_distance(self):
        GPIO.output(TRIG_PIN, False)
        time.sleep(0.000002)
        GPIO.output(TRIG_PIN, True)
        time.sleep(0.00001)
        GPIO.output(TRIG_PIN, False)
        
        while GPIO.input(ECHO_PIN) == 0:
            pulse_start = time.time()
        while GPIO.input(ECHO_PIN) == 1:
            pulse_end = time.time()
            
        pulse_duration = pulse_end - pulse_start
        distance = pulse_duration * 17150
        return distance

    def check_people_counter(self):
        # Check entrance (IR sensor)
        if GPIO.input(IR_SENSOR):
            self.people_count += 1
            self.door_state = True
            self.arduino.write(b"DOOR:OPEN\n")
            time.sleep(3)
            self.arduino.write(b"DOOR:CLOSE\n")
            self.door_state = False
            
        # Check exit (ultrasonic sensor)
        distance = self.read_distance()
        if distance < DISTANCE_THRESHOLD and self.people_count > 0:
            self.people_count -= 1
            self.door_state = True
            self.arduino.write(b"DOOR:OPEN\n")
            time.sleep(3)
            self.arduino.write(b"DOOR:CLOSE\n")
            self.door_state = False

    def read_sensors(self):
        temperature, humidity = self.read_temperature_humidity()
        sound_level = self.check_sound()
        light_level = GPIO.input(LDR_PIN)
        smoke_level = GPIO.input(SMOKE_PIN)
        
        return {
            'people_count': self.people_count,
            'temperature': temperature,
            'humidity': humidity,
            'light': light_level,
            'smoke': smoke_level,
            'sound': sound_level,
            'door': 1 if self.door_state else 0
        }

    def send_data_to_arduino(self, sensor_data):
        data_string = f"DATA:{sensor_data['people_count']},{sensor_data['temperature']:.1f},"
        data_string += f"{sensor_data['humidity']:.1f},{sensor_data['light']},"
        data_string += f"{sensor_data['smoke']},{sensor_data['sound']},{sensor_data['door']}\n"
        
        self.arduino.write(data_string.encode())

    def cleanup(self):
        GPIO.cleanup()
        self.arduino.close()

    def run(self):
        try:
            while True:
                # Check people counter
                self.check_people_counter()
                
                # Read all sensors
                sensor_data = self.read_sensors()
                
                # Send data to Arduino
                self.send_data_to_arduino(sensor_data)
                
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\nProgram terminated by user")
            self.cleanup()
        except Exception as e:
            print(f"Error occurred: {e}")
            self.cleanup()

if __name__ == "__main__":
    system = SmartSystem()
    system.run()
